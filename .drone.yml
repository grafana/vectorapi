---
# Build and push 'latest' Docker image.

kind: pipeline
type: docker
name: docker-linux-amd64

platform:
  os: linux
  arch: amd64

steps:
  # Push the docker image on main/tags.
  - name: Push Docker Image
    image: plugins/docker
    environment:
      DOCKER_BUILDKIT: 1
    settings:
      repo: us.gcr.io/kubernetes-dev/vectorapi
      cache_from: us.gcr.io/kubernetes-dev/vectorapi
      target: production
      build_args:
        - BUILDKIT_INLINE_CACHE=1
      config:
        from_secret: gcr_admin
      tags:
        - ${DRONE_COMMIT_SHA:0:10}-linux-amd64

trigger:
  ref:
    - "refs/heads/main"

---
# Build and push 'latest' Docker image.

kind: pipeline
type: docker
name: docker-linux-arm64

platform:
  os: linux
  arch: arm64

steps:
  # Push the docker image on main/tags.
  - name: Push Docker Image
    image: plugins/docker
    environment:
      DOCKER_BUILDKIT: 1
    settings:
      repo: us.gcr.io/kubernetes-dev/vectorapi
      cache_from: us.gcr.io/kubernetes-dev/vectorapi
      target: production
      build_args:
        - BUILDKIT_INLINE_CACHE=1
      config:
        from_secret: gcr_admin
      tags:
        - ${DRONE_COMMIT_SHA:0:10}-linux-arm64

trigger:
  ref:
    - "refs/heads/main"

---
# Push manifest for multi-arch image.
type: docker
kind: pipeline
name: docker-manifest

platform:
  os: linux
  arch: amd64

steps:
  - name: manifest
    image: docker:dind
    volumes:
    - name: dockersock
      path: /var/run
    commands: [
      # wait for host Docker to start when using DinD (30s timeout)
      "counter=0; until [ $counter -gt 30 ] || [ $(docker ps > /dev/null 2>&1; echo $?) -eq 0 ]; do sleep 1; let counter+=1;  echo \"($counter) waiting for docker to start..\"; done",
      "mkdir -p ~/.docker",
      "echo $dockerconfigjson > ~/.docker/config.json",
      # push commit tag manifest
      'docker manifest create us.gcr.io/kubernetes-dev/vectorapi:${DRONE_COMMIT_SHA:0:10} 
      us.gcr.io/kubernetes-dev/vectorapi:${DRONE_COMMIT_SHA:0:10}-linux-amd64 
      us.gcr.io/kubernetes-dev/vectorapi:${DRONE_COMMIT_SHA:0:10}-linux-arm64',
      'docker manifest push us.gcr.io/kubernetes-dev/vectorapi:${DRONE_COMMIT_SHA:0:10}',
      # push latest tag manifest
      'docker manifest create us.gcr.io/kubernetes-dev/vectorapi:latest
      us.gcr.io/kubernetes-dev/vectorapi:${DRONE_COMMIT_SHA:0:10}-linux-amd64 
      us.gcr.io/kubernetes-dev/vectorapi:${DRONE_COMMIT_SHA:0:10}-linux-arm64',
      'docker manifest push us.gcr.io/kubernetes-dev/vectorapi:latest',
      ]
    environment:
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
      dockerconfigjson: 
        from_secret: 'gcr_admin'

services:
- name: docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run

volumes:
- name: dockersock
  temp: {}

trigger:
  ref:
    - "refs/heads/main"

depends_on:
  - docker-linux-amd64
  - docker-linux-arm64

---
# Run integration test

kind: pipeline
type: docker
name: Integration tests

platform:
  os: linux
  arch: amd64

steps:
  # Push the docker image on main/tags.
  - name: Build and run tests
    image: python:3.11-bullseye
    commands: [
      "curl -sSL https://install.python-poetry.org | python -",
      "export PATH=$POETRY_HOME/bin:$PATH",
      "poetry install",
      ". .venv/bin/activate",
      "pytest -m integration --integration",
    ]
    environment:
      POETRY_VERSION: '1.6.1'
      POETRY_VIRTUALENVS_IN_PROJECT: true
      POETRY_HOME: '/drone/src/.poetry'
      POSTGRES_HOST: db
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres
      VECTORAPI_STORE_SCHEMA: test_schema
      VECTORAPI_STORE_CLIENT: pgvector

    when:
      event:
        include: ['pull_request']

services:
- name: db
  image: ankane/pgvector
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: mysecretpassword
    POSTGRES_PORT: 5432
    POSTGRES_DB: postgres

---
# Secret for pulling docker images.
kind: secret
name: dockerconfigjson
get:
  path: secret/data/common/gcr
  name: .dockerconfigjson

---
# Secret for pushing docker images.
kind: secret
name: gcr_admin
get:
  path: infra/data/ci/gcr-admin
  name: .dockerconfigjson
